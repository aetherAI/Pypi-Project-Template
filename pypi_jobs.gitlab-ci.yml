variables:
  PIP_CACHE_DIR: .cache/pip
  POETRY_CACHE_DIR: .cache/pypoetry
  POETRY_VIRTUALENVS_PATH: venv
  POETRY_HOME: .poetry

.install_poetry: &install_poetry
  - apt update && apt install curl
  - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
  - source $POETRY_HOME/env
  - poetry -V
  - poetry config repositories.project_pypi $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi
  - poetry config --list

.install_poetry_before_script:
  before_script:
    - *install_poetry

# HACK
.install_build_requires: &install_build_requires
  - poetry run pip install toml
  - build_requires=`poetry run python -c "import toml; print(*toml.load('pyproject.toml')['build-system']['requires'])"`
  - echo $build_requires
  - poetry run pip install $build_requires

.upload_pypi_template:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - *install_poetry
    - *install_build_requires
    - echo $CI_COMMIT_TAG
    - poetry version $CI_COMMIT_TAG
    - poetry publish --build -r project_pypi -u gitlab-ci-token -p $CI_JOB_TOKEN
  allow_failure: true

.test_upload_pypi_template:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - *install_poetry
    - *install_build_requires
    - poetry publish --dry-run --build -r project_pypi -u gitlab-ci-token -p $CI_JOB_TOKEN

upload_pypi:
  extends: .upload_pypi_template

test_upload_pypi:
  extends: .test_upload_pypi_template
