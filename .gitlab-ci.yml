include:
  - local: ci-templates/test.gitlab-ci.yml
  - local: ci-templates/publish.gitlab-ci.yml
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml

build:
  before_script:
    - echo "before install poetry"
    - !reference [default, before_script]

test:
  script:
    - echo "example override"
    - !reference [.test, script]

publish:
  script:
    - echo "publish as $CI_COMMIT_TAG"

pages:
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    PAGES_BRANCH_NAME: pages
  before_script: []
  script:
    - pip install sphinx sphinx-immaterial
    - apt update && apt -qqy install git
    - sphinx-build -D version=$CI_COMMIT_TAG docs/source public/$CI_COMMIT_TAG
    - git config --global user.email $GITLAB_USER_EMAIL
    - git config --global user.name $GITLAB_USER_NAME
    - vp=public/versions.json
    - if [[ $(git branch --list $PAGES_BRANCH_NAME) ]]; then
        echo "find existing branch '${PAGES_BRANCH_NAME}'";
        git checkout $PAGES_BRANCH_NAME;
      else
        echo "no branch named '${PAGES_BRANCH_NAME}', create a new one";
        git checkout --orphan $PAGES_BRANCH_NAME;
        git rm -rf .;
        echo "[]" > $vp;
        echo "/ /${CI_COMMIT_TAG}" > _redirects;
      fi
    - python -c "import json; lst = json.load(open('${vp}')); new_ver = dict(version='${CI_COMMIT_TAG}', title='${CI_COMMIT_TAG}', aliases=[]); json.dump([new_ver, *lst], open('${vp}', 'w'), indent=4)"
    - git add public
    - git commit -m "Add version $CI_COMMIT_TAG"
    - git remote set-url origin "https://${GITLAB_USER_NAME}:${CI_PUSH_TOKEN}@gitlab.com/$CI_PROJECT_PATH.git"
    - git push --set-upstream origin $PAGES_BRANCH_NAME -o ci.skip
  artifacts:
    paths:
    - public
