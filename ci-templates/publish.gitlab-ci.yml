include:
  - local: ci-templates/install-poetry-before-script.gitlab-ci.yml

variables:
  POETRY_REPOSITORIES_PROJECT_URL: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
  POETRY_HTTP_BASIC_PROJECT_USERNAME: gitlab-ci-token
  POETRY_HTTP_BASIC_DYSK_LABS_PASSWORD: ${CI_JOB_TOKEN}

# HACK
.install_build_requires: &install_build_requires
  - poetry run pip install toml
  - build_requires=`poetry run python -c "import toml; print(*toml.load('pyproject.toml')['build-system']['requires'])"`
  - echo $build_requires
  - poetry run pip install $build_requires

.semver_rules:
  rules:
    # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/

.test-publish:
  stage: test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  script:
    - *install_build_requires
    - poetry publish --build -r project --dry-run

.publish:
  stage: deploy
  rules: !reference [.semver_rules, rules]
  script:
    - *install_build_requires
    - echo "publish as $CI_COMMIT_TAG"
    - poetry version $CI_COMMIT_TAG
    - poetry publish --build -r project

.release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules: !reference [.semver_rules, rules]
  script:
    - echo "release as $CI_COMMIT_TAG"
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'

test-publish:
  extends: .test-publish

publish:
  extends: .publish

release:
  extends: .release
