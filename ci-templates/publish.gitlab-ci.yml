include:
  - local: ci-templates/install-poetry-before-script.gitlab-ci.yml

# HACK
.install_build_requires: &install_build_requires
  - poetry run pip install toml
  - build_requires=`poetry run python -c "import toml; print(*toml.load('pyproject.toml')['build-system']['requires'])"`
  - echo $build_requires
  - poetry run pip install $build_requires

.test-publish:
  stage: test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  script:
    - *install_build_requires
    - poetry config repositories.project_pypi $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi
    - poetry publish --build -r project_pypi -u gitlab-ci-token -p $CI_JOB_TOKEN --dry-run
  artifacts:
    paths:
      - dist
    expire_in: 1 day

.publish:
  stage: deploy
  rules:
    # examples: 1.x, v1.1.x
    - if: $CI_COMMIT_TAG =~ /^v?\d+(.*)x$/
      when: never
    # many false positive but easy, just let the pipeline fail if invalid
    - if: $CI_COMMIT_TAG =~ /^v?\d+/
  script:
    - *install_build_requires
    - echo "publish as $CI_COMMIT_TAG"
    - poetry config repositories.project_pypi $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi
    - poetry version $CI_COMMIT_TAG
    - poetry publish --build -r project_pypi -u gitlab-ci-token -p $CI_JOB_TOKEN

test-publish:
  extends: .test-publish

publish:
  extends: .publish
